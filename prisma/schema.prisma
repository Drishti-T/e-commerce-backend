// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id          String     @id @default(cuid())
  name        String
  email       String    @unique
  passwordHash    String // Null  for 0auth users
  avatar      String
  role        Role       @default(CUSTOMER)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt


  //relational data
  addresses   Address[]
  cartItems   CartItem[] // we might want to store this into a session
  orders      Order[]
  reviews     Review[]
  accounts Account[] 
  session Session[] 
}

model Account {
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId] , references: [id], onDelete: Cascade)
  provider String
  providerAccountId String
  refresh_token String? @db.Text
  refresh_token_expires_in Int?
  access_token String? @db.Text
  access_token_expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.Text
  session_state String?
}

model Session {
 id String @id @default(cuid())
 sessionToken String @unique
 userId String
 expires DateTime
 user User @relation(fields: [userId] , references: [id] , onDelete: Cascade)
}

enum Role {
  ADMIN
  CUSTOMER
}

model Address {
  id        String   @id @default(cuid())
  fullName  String
  street    String
  city      String
  state     String
  zipCode   String
  country   String
  isDefault Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Company {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  logoUrl   String?
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id            String         @id @default(cuid())
  name          String
  slug          String         @unique
  description   String
  price         Float
  stock         Int
  imageUrl      String
  company       Company        @relation(fields: [companyId], references: [id])
  companyId     String
  category      Category       @relation(fields: [categoryId], references: [id])
  categoryId    String
  variants      ProductVariant[]
  cartItems     CartItem[]
  orderItems    OrderItem[]
  reviews       Review[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model ProductVariant {
  id         String   @id @default(cuid())
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  color      String?
  size       String?
  stock      Int
  priceDiff  Float    @default(0)
  sku        String   @unique
  imageUrl   String?
}

model CartItem {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int      @default(1)
}

model Order {
  id                String       @id @default(cuid())
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  status            OrderStatus  @default(PENDING)
  totalAmount       Float
  estimatedDelivery DateTime?
  user              User         @relation(fields: [userId], references: [id])
  userId            String
  shippingAddressId String
  orderItems        OrderItem[]
  payment           Payment?
}

model OrderItem {
  id         String   @id @default(cuid())
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    String
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  quantity   Int
  price      Float
  name       String
  image      String?
}

model Payment {
  id          String         @id @default(cuid())
  order       Order          @relation(fields: [orderId], references: [id])
  orderId     String         @unique
  paymentId   String
  method      String
  status      PaymentStatus
  amount      Float
  currency    String
  paidAt      DateTime?
  card        CardPayment?
}

model CardPayment {
  id         String   @id @default(cuid())
  payment    Payment  @relation(fields: [paymentId], references: [id])
  paymentId  String   @unique
  last4      String
  network    String
  type       String
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}
