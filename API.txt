# API's

___________________________________________________________________________________________________
## AUTH PAGE

1. Signup (Traditional way)

    => POST /api/v1/auth/signup 
     {
        "name" : "drishti",
        "email" : "drishti@gmail.com",
        "passowrd" : "kjshjsbjvknckj",
        "DOB" : {
            "date" : "1",
            "month" : "01",
            "year" : "2004" 
        },
        "country" : "India",
        "phoneNumber" : "8576827468"
        "type" : "Admin" or "user",
        "refreshToken": "your_refresh_token",

     }

    =>  return status: code 200(success) 
     {
        "userId" : "1",
        "token": "your_jwt_token",
        "type": "user",
        "expiresIn": 3600

     }

    => error : 400 ,500 ,409 , 422

    400 
    {
        "error" : "fields missing"
    }

    500
    {
        "error" : "Server-side error"
    }

    409
    {
        "error" : "Email already exists"
     }

     422
     {
        "error" : "invalid password format"
     }

       
           

2. Signin/Login (Traditional way)

    POST /api/v1/auth/login
    {
        "email" : "drishti@gmail.com",
        "passowrd" : "kjshjsbjvknckj"
    }

    return status: code 200 
    {
        "token" : "dhjchskubcshbjsdcsdcsnbdjc",
        "expiresIn": 3600,
        "refreshToken": "your_refresh_token",


    }

    error: 500 , 400 , 403 , 401

            500
            {
                "error" : "Server-side error

            400
            {
                "error" : "missing fields either email or password"
            }

            401 
            {
                "error" : "Invalid email or password"
            }

            403
            {
                "error" : "user not verified (forbidden req)"
            }






3. Signup / login ( both are same for 0auth )

    => POST api/v1/auth/oauth
     {
        "provider": "google" / "apple" / etc...,
        "accessToken" : "your_access_token"
     }

     => return status : 200 (success)

     {
    "user": {
        "id": "123",
        "email": "user@example.com",
        "name": "John Doe",
        "avatar": "https://lh3.googleusercontent.com/...",
        "email" : "drishti@gmail.com",
        "provider": "google"
    },
    "token": "your_jwt_token",
    "expiresIn": 3600
    }

     error: 401 Unauthorized 
            {
                "error" : "Invalid or expired acess token"
            }

            400 Bad Request
            {
                "error" : "access token is required"
            }
            500
            {
                "error" : "internal error"
            }

4. forgot password

    => POST api/v1/auth/forgot-password 
            {
                "email" : "drishti@gmail.com"
            }

        return status: 200 
            {
                "message" : "If the email exists, a reset link has been sent"
            }
// in case of 0auth the password change hppns thorugh the providers interface not the application
         
5. logout (traditional and 0auth )

Authorization: Bearer <your_jwt_token>


POST api/v1/auth/logout  & POST api/v1/auth/0auth/logout
or we could merge both in a single API

request body (only for 0auth):
{
  "provider" : "google"
}

response body: 200
{
 "message" : "logged out successfully"
}

error: 
{
  "success" : false,
  "code" :500,
  "message" : "internal error"
}


{
  "success" : false,
  "code" :401,
  "message": "User not authenticated"
}



{
  "success" : false,
  "code" :400,
  "message": "Bad request"
}

{  
  "success" : false,
  "code" :403,
  "message": "Forbidden request"
}

{
  "success" : false,
  "code" :404,
  "message": "Endpoint not found"
}

6. refreshtoken (Traditional)
Authorization: Bearer your_request_token

POST api/v1/auth/refreshToken

response : 200

{
    "token": "your_new_jwt_token",
    "expiresIn": 3600,
    "refreshToken": "new_refresh_token"
}

error:
{
    "success": false,
    "code": 400,
    "message": "Refresh token is required"
}

{
    "success": false,
    "code": 401,
    "message": "Invalid or expired refresh token"
}

{
    "success": false,
    "code": 403,
    "message": "Refresh token does not match user"
}

{
    "success": false,
    "code": 500,
    "message": "Internal server error"
}

7. refreshTOken (0auth)

Authorization: Bearer your_request_token

POST api/v1/auth/0auth/refreshToken

request body: 
{
  "provider" : "google"
}

response : 200

{
    "token": "your_new_jwt_token",
    "expiresIn": 3600,
    "refreshToken": "new_refresh_token"
}

error:
{
    "success": false,
    "code": 400,
    "message": "Refresh token is required"
}

{
    "success": false,
    "code": 401,
    "message": "Invalid or expired refresh token"
}

{
    "success": false,
    "code": 403,
    "message": "Refresh token does not match user"
}

{
    "success": false,
    "code": 500,
    "message": "Internal server error"
}

8. verify email (Traditional)
=>Verification via Email & OTP Code

=> For initial email verification, do not use auth headers.
=> For actions by authenticated users, such as resending the verification link, consider using auth headers to ensure security.
=> no need of verification in 0auth


request body:
{
    "email": "drishti@gmail.com",
    "otpCode": "123456"
}

response : 200
{
    "message": "Email verified successfully!"
}

error :

{
    "success": false,
    "code": 403,
    "message": "Email already verified"
}

{
    "success": false,
    "code": 404,
    "message": "Email not found"
}

{
    "success": false,
    "code": 500,
    "message": "Internal server error"
}

{
    "success": false,
    "code": 401,
    "message": "Invalid or expired OTP code"
}

{
    "success": false,
    "code": 400,
    "message": "Missing or invalid fields"
}


___________________________________________________________________________________________________

## User account

1. POST /api/v1/user/metadata

update the user's metadata:


Authorization: Bearer your_jwt_token
Content-Type: application/json

whatever needs to be updated will be included in the request body
{
    "name" : "drishtitanwar"
}

response : 200 (success)

{
    "message: "updated successfully",
    "user" : {
        "id" : "123",
        "name" : "drishtitanwar",
        "updatedAt" : 2024-10-26T10:00:00Z,
        "updatedBy" : "user" or "admin"
    }
 }




2. particular user's order list

 GET api/v1/user/me/order

Authorization: Bearer your_jwt_token // for verfification of the user


{
  "orders": [
    {
      "id": "ORD123456",
      "createdAt": "2025-02-26T10:15:30Z",
      "status": "Delivered",
      "totalAmount": 129.99,
      "payment": {
        "paymentId": "pay_29QQoUBi66xm2f",
        "method": "card",
        "status": "success",
        "transactionAmount": 129.99,
        "currency": "INR",
        "card": {
          "last4": "4242",
          "network": "Visa",
          "type": "credit"
        }
      },
      "shippingAddress": {
        "fullName": "John Doe",
        "street": "123 Main St",
        "city": "New York",
        "state": "NY",
        "zipCode": "10001",
        "country": "USA"
      },
      "estimatedDelivery": "2025-02-20",
      "items": [
        {
          "productId": "PROD001",
          "name": "Wireless Gaming Mouse",
          "price": 59.99,
          "quantity": 1,
          "image": "https://example.com/images/mouse.jpg"
        }
      ]
    }, 
    {
      ..................
    },
    {
        .................
    }
  ]
}

3. GET /api/v1/users/me
Authorization: Bearer your_jwt_token // for verfification of the user


response : 200 
{
  "id" : "1",
  "name" : "drishti",
  "email" : "dristhi@gmail.com",
  "avatar" : "https://.....url",
  ....depends on what do we need to display on the user's dashboard

},  




___________________________________________________________________________________________________
## Products CRUD


1. to get all the products list

 GET api/v1/products ( access to all to view all the products )

 return : 200 
 {
  "id": "CLOTH123",
  "name": "Men's Oversized Hoodie",
  "description": "A comfortable oversized hoodie made from premium cotton blend, perfect for casual wear.",
  "brand": "Nike",
  "category": "Men > Hoodies & Sweatshirts",
  "price": 49.99,
  "discountPrice": 39.99,
  "currency": "USD",
  "stock": {
    "quantity": 200,
    "status": "in_stock"
  },
  "sizes": ["S", "M", "L", "XL", "XXL"],
  "colors": [
    {
      "name": "Black",
      "hex": "#000000",
      "image": "https://example.com/images/hoodie-black.jpg"
    },
    {
      "name": "Beige",
      "hex": "#F5F5DC",
      "image": "https://example.com/images/hoodie-beige.jpg"
    }
  ],
  "variants": [
    {
      "id": "CLOTH123-BLACK-S",
      "color": "Black",
      "size": "S",
      "stock": 50
    },
    {
      "id": "CLOTH123-BLACK-M",
      "color": "Black",
      "size": "M",
      "stock": 40
    },
    {
      "id": "CLOTH123-BEIGE-L",
      "color": "Beige",
      "size": "L",
      "stock": 30
    }
  ],
  "fabric": "80% Cotton, 20% Polyester",
  "fit": "Oversized",
  "gender": "Men",
  "season": "Fall/Winter",
  "images": [
    "https://example.com/images/hoodie-front.jpg",
    "https://example.com/images/hoodie-back.jpg"
  ],
  "rating": 4.7,
  "reviewsCount": 320,
  "careInstructions": [
    "Machine wash cold",
    "Do not bleach",
    "Tumble dry low",
    "Iron on low heat"
  ],
  "shipping": {
    "freeShipping": true,
    "estimatedDelivery": "3-5 days"
  },
  "returnPolicy": "30-day return policy",
  "paymentOptions": ["Credit Card", "UPI", "Net Banking", "Wallet", "EMI", "Buy Now Pay Later"],
  "metadata": {
    "seoTitle": "Men's Oversized Hoodie - Comfortable & Stylish",
    "seoDescription": "Buy the best oversized hoodie for men. Premium cotton blend, perfect for casual wear in fall and winter.",
    "createdAt": "2025-02-26T10:15:30Z",
    "updatedAt": "2025-02-27T08:00:00Z"
  }
}




      
2. to add a new product to the site ( only auper-admins , product manager access allowed )

authentication req. for super-admins , product manager

Authorization: Bearer your_jwt_token (for super-admins/product manager)
Content-Type: application/json



POST api/v1/admin/product 

request body: 

{
  "name": "Men's Oversized Hoodie",
  "description": "A comfortable oversized hoodie made from premium cotton blend, perfect for casual wear.",
  "brand": "Nike",
  "category": "Men > Hoodies & Sweatshirts",
  "price": 49.99,
  "discountPrice": 39.99,
  "currency": "USD",
  "stock": {
    "quantity": 200,
    "status": "in_stock"
  },
  "sizes": ["S", "M", "L", "XL", "XXL"],
  "colors": [
    {
      "name": "Black",
      "hex": "#000000",
      "image": "https://example.com/images/hoodie-black.jpg"
    },
    {
      "name": "Beige",
      "hex": "#F5F5DC",
      "image": "https://example.com/images/hoodie-beige.jpg"
    }
  ],
  "variants": [
    {
      "color": "Black",
      "size": "S",
      "stock": 50
    },
    {
      "color": "Black",
      "size": "M",
      "stock": 40
    },
    {
      "color": "Beige",
      "size": "L",
      "stock": 30
    }
  ],
  "fabric": "80% Cotton, 20% Polyester",
  "fit": "Oversized",
  "gender": "Men",
  "season": "Fall/Winter",
  "images": [
    "https://example.com/images/hoodie-front.jpg",
    "https://example.com/images/hoodie-back.jpg"
  ],
  "careInstructions": [
    "Machine wash cold",
    "Do not bleach",
    "Tumble dry low",
    "Iron on low heat"
  ],
  "shipping": {
    "freeShipping": true,
    "estimatedDelivery": "3-5 days"
  },
  "returnPolicy": "30-day return policy",
  "paymentOptions": ["Credit Card", "UPI", "Net Banking", "Wallet", "EMI", "Buy Now Pay Later"],
  "metadata": {
    "seoTitle": "Men's Oversized Hoodie - Comfortable & Stylish",
    "seoDescription": "Buy the best oversized hoodie for men. Premium cotton blend, perfect for casual wear in fall and winter.",
  }
}

response : 200 (success)

{
  "success" : true,
  "message" : "Product added successfully",
  "product" : {
    "id": "123e4567-e89b-12d3-a456-426614174000",
    "name": "Men's Oversized Hoodie",
    "createdAt": "2025-02-26T10:15:30Z"
  }
}

error: 

for JWT Missing or Invalid : 
{
  "success" : false,
  "code" : 401,
  "message" : "Unauthorized . Please log in"
}


for User is Not Super-Admin or Product Manager : 
{
  "success": false,
  "code" : 403,
  "message": "Access denied. Only super-admins and product managers can add products."
}

for Missing Required Fields : 

{
"success" : false,
"code" : 400,
"message" : "Missing fields"
}

3. to get a specific product using productId

we dont need aunthentication for basic product info as frontend also req's it ans users who havnt signedup or loggedin can also browse the site
GET api/v1/product/:id

response body:
{
  "id": "CLOTH123",
  "name": "Men's Oversized Hoodie",
  "description": "A comfortable oversized hoodie made from premium cotton blend, perfect for casual wear.",
  "brand": "Nike",
  "category": "Men > Hoodies & Sweatshirts",
  "price": 49.99,
  "discountPrice": 39.99,
  "currency": "USD",
  "stock": {
    "quantity": 200,
    "status": "in_stock"
  },
  "sizes": ["S", "M", "L"],
  "colors": [
    {
      "name": "Black",
      "hex": "#000000",
      "image": "https://example.com/images/hoodie-black.jpg"
    },
    {
      "name": "Beige",
      "hex": "#F5F5DC",
      "image": "https://example.com/images/hoodie-beige.jpg"
    }
  ],
  "variants": [
    {
      "id": "CLOTH123-BLACK-S",
      "color": "Black",
      "size": "S",
      "stock": 50
    },
    {
      "id": "CLOTH123-BLACK-M",
      "color": "Black",
      "size": "M",
      "stock": 40
    },
    {
      "id": "CLOTH123-BEIGE-L",
      "color": "Beige",
      "size": "L",
      "stock": 30
    }
  ],
  "fabric": "80% Cotton, 20% Polyester",
  "fit": "Oversized",
  "gender": "Men",
  "season": "Fall/Winter",
  "images": [
    "https://example.com/images/hoodie-front.jpg",
    "https://example.com/images/hoodie-back.jpg"
  ],
  "rating": 4.7,
  "reviewsCount": 320,
  "careInstructions": [
    "Machine wash cold",
    "Do not bleach",
    "Tumble dry low",
    "Iron on low heat"
  ],
  "shipping": {
    "freeShipping": true,
    "estimatedDelivery": "3-5 days"
  },
  "returnPolicy": "30-day return policy",
  "paymentOptions": [
    "Credit Card",
    "UPI",
    "Net Banking",
    "Wallet",
    "EMI",
    "Buy Now Pay Later"
  ],
  "metadata": {
    "seoTitle": "Men's Oversized Hoodie - Comfortable & Stylish",
    "seoDescription": "Buy the best oversized hoodie for men. Premium cotton blend, perfect for casual wear in fall and winter."
  }
}

error : 

if product not found
{
  "success" : false,
  "code" : 404,
  "message" : "Product not found"
}


4. delete a product

authentication req  ( only super-admins and product manager)


Authorization Bearer <JWT_TOKEN>

DELETE api/v1/product/:id

response : 200 

{
  "success": true,
  "code": 200,
  "message": "Product deleted successfully"
}

error : 

{
  "success" : false,
  "code" : 401,
  "message" : "Unauthorized . Please log in "
}

{
  "success" : false,
  "code " : 403,
  "message": "Access denied. Only super-admins and product managers can add products."

}

{
  "success": false,
  "code": 400,
  "message": "Invalid product ID format."
}

{
  "success": false,
  "code": 404,
  "message": "product not found."
}

6. update a product

aunthentication is required(only super-admins or prodcut manager can update a product)

Authorization Bearer <JWT_TOKEN>

PUT api/v1/product/:id

// only send those fields which are needed to be update
request body:
{
  "discountPrice" : 36.99
}

error : 
 Product ID does not exist.

 {
    "success" : false,
    "code" : 404,
    "message" : " Product does not exist"

 }


jwt missing or invalid
{
  "success" : false,
  "code" : 401,
  "message" : "Unauthorized . Please log in"
}


for User is Not Super-Admin or Product Manager : 
{
  "success": false,
  "code" : 403,
  "message": "Access denied. Only super-admins and product managers can add products."
}

for invalid data format: 

{
"success" : false,
"code" : 400,
"message" : "invalid data"
}


_______________________________________________________________________________
## brand

1. get all the registered brand detail on the website


GET /api/v1/brand ( access to all to view all the brands )

return : 200 (success)
{
  "success" : true ,
  "brands" : [
    {
      "ID" : "1",
      "name" : "Zara",
      "no_of_Products" : "12",
      "description": "Zara is a global fashion brand offering stylish clothing and accessories.",
      "category": ["Fashion", "Apparel"],
      "image" : "url../of/theimage/or/logo,
      "products": [
      {
        "id": "123e4567-e89b-12d3-a456-426614174000",
        "name": "Men's Oversized Hoodie",
        "price": 49.99,
        "stock": 100
      },
      {
        "id": "223e4567-e89b-12d3-a456-426614174000",
        "name": "Men's Slim Fit Jeans",
        "price": 59.99,
        "stock": 50
      }
    ]
    },
    {
      "ID" : "2",
      "name" : "Prada",
      "no_of_Products" : "10",
      "description": "Prada is a global fashion brand offering stylish clothing and accessories.",
      "category": ["Fashion", "Apparel"],
      "image" : "url../of/theimage/or/logo,
      "products" : []
    },
    {
      ...
    },
    {
      ...
    }

  ]
}

2. ADD new brand detail

POST api/v1/admin/brand

authentication required (only super-admins , product manager are allowed )

request body : 
{
  "name": "Zara",
  "description": "Zara is a global fashion brand offering stylish clothing and accessories.",
  "category": ["Fashion", "Apparel"],
  "image": "https://example.com/zara-logo.png"
}

response : 200

{
  "success" : true,
  "code" : 200,
  "message" : "brand deatil added"
}


error: 

{
  "success": false,
  "code": 401,
  "message": "Unauthorized. Please log in."
}


{
  "success": false,
  "code": 403,
  "message": "Access denied. Only super-admins and product managers can add brands."
}


{
  "success": false,
  "code": 400,
  "message": "Missing required fields: name, category, or image."
}

3. DELETE brand details

authentication required (only super-admins , product manager are allowed )


Authorization: Bearer your_jwt_token (for super-admins/product manager)
DELETE api/v1/admin/brand/:id

response : 200 
{
  "success" : true,
  "code" : 200,
  "message" : "details deleted successfully"
}

error : 

for JWT Missing or Invalid : 
{
  "success" : false,
  "code" : 401,
  "message" : "Unauthorized . Please log in"
}

for User is Not Super-Admin or Product Manager : 
{
  "success": false,
  "code" : 403,
  "message": "Access denied. Only super-admins and product managers can add products."
}

{
  "success": false,
  "code": 404,
  "message": "Brand not found."
}

{
  "success": false,
  "code": 400,
  "message": "Invalid brand ID format."
}


4. update brand details

authentication required (only super-admins , product manager are allowed )


Authorization: Bearer your_jwt_token (for super-admins/product manager)
Content-Type: application/json


PUT api/v1/admin/brand/:id

request body :
{
  "description": "ghsd shjvhdbvhg ",
  "image" : "image/url/...."
}

response : 200 


{
  "success" : true,
  "code" : 20 ,
  "message" : "info updated successfully"
}

error : 

{
  "success" : false,
  "code" : 401,
  "message" : "Unauthorized . Please log in "
}



{
  "success" : false,
  "code " : 403,
  "message": "Access denied. Only super-admins and product managers can add products."

}

{
  "success": false,
  "code": 400,
  "message": "Invalid brand ID format."
}

{
  "success": false,
  "code": 400,
  "message": "Invalid data fromat"
}

{
  "success": false,
  "code": 404,
  "message": "brand not found."
}

_______________________________________________________________________________
## comments

1. add  a comment

authentication is required (for user)

Authorization: Bearer <JWT_TOKEN> 
Content-Type: application/json

POST api/v1/product/:id/comment

request body : 
{
  "comment" : "Fits perfectly n nice color"
}

response : 200 
{
  "success" : true
  "code" : 200
  "message" : "commented successfully",
}

error: 

{
 "success" : false,
 "code" : 401,
 "message" : "Unauthorized"
}

{
  "success" : false,
  "code" : 403,
  "message" : "Forbidden. You cannot update this comment."
}

{
  "success" : false,
  "code" : 400,
  "message" : "missing fields"
}

{
  "success" : false ,
  "code" : 404,
  "message" : "product not found"
}

2. delete a comment 

(only super-admins are allowed )

authentication req. for super-admins 

Authorization: Bearer your_jwt_token (for super-admins)
Content-Type: application/json

DELETE api/v1/admin/comment/:id

response : 200 
{
  "success" : true,
  "code" : 200,
  "message" : "successfully removed the comment"
}

error: 

{
  "success: " false ,
  "code" : 401,
  "message" : "Unauthorized. Please log in."
}

{
  "success" : false,
  "code" : 400,
  "message" : "missing fields"
}

{
  "success" :false,
  "code" : 404,
  "message" : "Comment not found"
}
{
  "success" : false,
  "code" : 403,
  "message" : "forbidden"
}

{
  "message": "Internal server error",
  "code": 500
}

3. update a comment

authentication is required (for super-admins only)

Authorization: Bearer <JWT_TOKEN> 
Content-Type: application/json

PUT api/v1/admin/comment/:id

request body : 

{
  "comment" : "small size (Edited)"
}

response : 200 
{
  "success" : true
  "code" : 200
  "message" : "commente updated successfully",
}

error: 

{
  "success: " false ,
  "code" : 401,
  "message" : "Unauthorized. Please log in."
}

{
  "success" : false,
  "code" : 400,
  "message" : "missing fields"
}

{
  "success" :false,
  "code" : 404,
  "message" : "comment not found"
}
{
  "success" : false,
  "code" : 403,
  "message" : "forbidden"
}

4. to  read a comment by id

GET api/v1/comment/:id

response : 200 
{
  "success": true,
  "code": 200,
  "message": "Comment fetched successfully",
  "data": {
    "comment": "blahblah"
  }
}

error: 

{
  "success" :false,
  "code" : 400,
  "message" : "Invalid comment id"
}

{
  "success": false,
  "code": 404,
  "message": "Comment not found"
}

{
  "success" :false,
  "code" : 500,
  "message" : "Internal error"
}

_______________________________________________________________________________
## user management

 2. GET api/v1/usersadmin/metadata/allUsers
 or if only name is the priority
 GET /api/v1/usersadmin/metadata/allUsers?fields=name

 authentication is req to get all user info ( only for super admins )

 Authorization: Bearer <JWT_TOKEN>


get all users:

 return : 200 (success)
 {
    "status"" : "success",
    "users" : [
        {
            "id" : "123",
            "name" : "drishti",
            "email" : "dristhi@gmail.com",
            "avatar" : "https://.....url"
            "provider" : "google",
            "createdAt" : "2024-02-26T10:00:00Z"
        },
        {
            "id": "456",
            "name": "Alice Smith",
            "email": "alice@example.com",
            "avatar": "https://lh3.googleusercontent.com/...",
            "provider": "apple",
            "createdAt": "2024-02-25T12:30:00Z"
        }.
        {
            ....
        },
        {
            ....
        }
    ]
 }

 error: 404 (not found)
 {
    "message" : "users not found"
 }

 3. to get specific users

 
 authentication is req to get all user info ( only for super admins )

Authorization: Bearer your_jwt_token (for super-admins)


  GET /api/v1/admin/users/metadata/bulk?ids=[1,3,5]

  returns : 200 
  {
    "status" : "success" ,
    "users" : [
        {
          "id" : "1",
            "name" : "drishti",
            "email" : "dristhi@gmail.com",
            "avatar" : "https://.....url"
            "provider" : "google",
            "role" : "user",
            "createdAt" : "2024-02-26T10:00:00Z"
        },  
        {
            "id" : "3",
            "name" : "sam",
            "email" : "sam@gmail.com",
            "avatar" : "https://.....url"
            "provider" : "google",
            "role" : "user",
            "createdAt" : "2024-04-26T10:00:00Z"
        },
        {
            "id" : "5",
            "name" : "alex",
            "email" : "alex@gmail.com",
            "avatar" : "https://.....url"
            "provider" : "apple",
            "role" : "user",
            "createdAt" : "2024-10-26T10:00:00Z"
        },
        }
        
    ]
  }




3. PUT /api/v1/admin/users/metadata/:id

Authorization: Bearer your_jwt_token (for super-admins)

request : 

{
  "name" : "drishtitanwar",
  "role" : "admin"
}

response : 200
{
  "success" : true,
  "code" : 200,
  "user" : 
  {
    "id" : "123",
    "name" : "drishtitanwar",
    "role" : "admin",
    "updatedAt" : 2024-10-26T10:00:00Z,
    "updatedBy" : "user" or "admin"
  }

}

error : 403 Forbidden : only admins allowed, 
        404 user not found,
        400 bad request : invalid fields,
        401 unauthorized,
        500 internal error



4. DELETE a user

 authentication is req to get all user info ( only for super admins )
Authorization: Bearer your_jwt_token (for super-admins)

  DELETE /api/v1/admin/users/metadata/bulk?ids=[1]

  response : 200
  {
    "success": true,
    "code":200,
    "message" : "user deleted successfully"
  }


error : 403 Forbidden : only admins allowed, 
        404 user not found,
        400 bad request : invalid user id,
        401 unauthorized,
        500 internal error

    

_______________________________________________________________________________
## Product management

1. search a product

no authentication is req. since any user can search for the products

GET api/v1/products/search?query={query}
GET /api/v1/products/search?query=laptop&query=phone&query=tablet

url will look like: 

response: 200

{

"success" : true,
"code" : 200,
"query" : [laptop , phone , tablet]
"products" : [
  {
    id: 123,
    "name" : "blah blah laptop",
    "price" : 120000,
    "category" : "Electronics",
    "imageUrl" : "https://example.com/laptop.jpg"
  },
  {
    id: 1334,
    "name" : "ifruity phone",
    "price" : 150000,
    "category" : "Electronics",
    "imageUrl" : "https://example.com/laptop.jpg"
  },
  {
    id: 1334,
    "name" : "ifruity pad",
    "price" : 150000,
    "category" : "Electronics",
    "imageUrl" : "https://example.com/laptop.jpg"
  },
]


}

error : 
400 : bad request ( invalid search term)
500: internal server error
200 : no product is found (instead send the response as blank array [] )


2. filter products

no auth is req.

more filtes will be added if required as per the need:
category = Tshirts , Shorts , Shirts , Hoodie , Jeans , Skirts , Shoes , Heels etc....
minPrice 
maxPrice
color
dressStyle = Casual , Formal , Party , Gym etc....
size = XX-Small , X-Small , Small , Medium , Large , X-Large , XX-Large , 3X-Large , 4X-large

GET /api/v1/products/filter?category={category}&color={color}&dressStyle={dressStyle}&size={size}&price[min]={minPrice}&price[max]={maxPrice}

example: GET /api/v1/products/filter?category=Tshirt&color={black}&dressStyle={Formal}&size={X-Large}&price[min]=100&price[max]=500

color , size, dressStyle , category = // if frontend needs we will return it in the response or else wont .
response : 200
{
  "success" : true,
  "code" : 200,
  filters: [Tshirt , black , 1000 , 1500]
  "products" : [
    {
    id: 123,
    "name" : "blah blah Tshirt",
    "price" : 1200,
    "color" : "black",
    "size" : "X-Large",  
    "category" : "Tshirt", 
    "dressStyle" : "Formal",
    "imageUrl" : "https://example.com/laptop.jpg"
  },
  {
    id: 1334,
    "name" : "blah blah Tshirt",
    "price" : 1500,
    "color" : "black",
    "size" : "X-Large",
    "category" : "Tshirt",
    "dressStyle" : "Formal",
    "imageUrl" : "https://example.com/laptop.jpg"
  },
  {
    id: 1334,
    "name" : "blah blah Tshirt",
    "price" : 1500,
    "color" : "black",
    "size" : "X-Large",
    "category" : "Tshirt",
    "dressStyle" : "Formal",
    "imageUrl" : "https://example.com/laptop.jpg"
  },
  ]
}

error : 

200 (success but nothing is found instead send the response as blank array []) : products not found
400 : incalid filter parameters
500 : internal errors


3. product recommendations

// lets put it on hold a lil complicated 

=> we can or not add authentication here but for this project user based recommendations will be added so yeah auth is needed

=> Recommendation system needs the following data : 
	1. User profile 
	2. Browsing history
	3. Purchase history
	4. Adding to cart  or wishlist
  5. similar user data


Authorization Bearer <JWT_TOKEN>
Content-Type: application/json




GET api/v1/products/recommended


_______________________________________________________________________________
## category management 

1. get all categories

GET api/v1/categories

we dont need auth here as it is public

resonse : 200 
{
  "success" : true,
  "code" :200,
  "categories" : [
    {
      "id"  : 1,
      "name"  :"Tshirt",
      "slug" : "tshirt",
      "imageUrl"  : "https://example.com/image1.jpg"
    } ,
        {
      "id"  : 1,
      "name"  :"Short",
      "slug" : "short",
      "imageUrl"  : "https://example.com/image1.jpg"
    },
        {
      "id"  : 1,
      "name"  :"Skirt",
      "slug" : "skirt",
      "imageUrl"  : "https://example.com/image1.jpg"
    },
        {
      "id"  : 1,
      "name"  :"Hoodie",
      "slug" : "hoodie",
      "imageUrl"  : "https://example.com/image1.jpg"
    },
        {
      "id"  : 1,
      "name"  :"Jeans",
      "slug" : "jeans",
      "imageUrl"  : "https://example.com/image1.jpg"
    },
    {
      ....
    }

  ]
}

error : 

200 : for empty category list  []
500 internal error
400:  bad request (invalid category name )

2. new category creation
auth required only super - admins

Authorization Bearer <JWT_TOKEN>
Content-Type: application/json


POST api/v1/admin/category

request body : 
{
  "name" : "Flats",
  "slug" : "flats",
  "imageUrl" : "https://example.com/image.jpg"
}

response : 200
{
  "success" : true ,
  "code" : 200,
  "category" : {
    "id" : 12356
  }
}

error : 
400 : bad request (invalid fields) or duplicate category
500 : internal error
401 : unauthorized (please login)
403: forbidden (only super-admins allowed)
404 : invalid endpoint


3. update category

Authorization Bearer <JWT_TOKEN> ( only super-admins)
Content-Type: application/json


PUT api/v1/admin/category/:id

request body : 
{
  "name" : "heel boots",
  "image" : "https://exampale.com/image2.jpg"
}

response : 
{
  "success" true,
  "code" : 200,
  "category :{ 
    "id" : 8746753,
    "name" : "heel boots",
    "image" : "https://exampale.com/image2.jpg"
  }
}
error: 
500
403
401
400
404




4. delete category

Authorization Bearer <JWT_TOKEN> ( only super-admins)
Content-Type: application/json

DELETE api/v1/admin/category/:id

response : 
{
  "success" : true,
  "code" : 200,
  "message" : "category deleted successfully"
}

error: 
500
403
401
400
404


_______________________________________________________________________________
## cart management

1. add to cart

= signedup user request
POST api/v1/user/cart

Authorization Bearer <JWT_TOKEN>  (user only)
Content-Type: application/json

  => here :Database Structure: The cart is linked to the userId rather than a cartId
{
  "productId":  "134632",
  "quantity" : 2
}

and for non-signedup users (guest users )

no auth is required

request body :

{
  "cartId"  : "temp-hcbsdu77" // only for guest users,
  "productId" : "12783",
  "quantity" : 2
}

when a user sign's in merge guestCart to userCart and clear cartId from cookies or loacl storage

repsonse : 
{
  "success" : true,
"code" : 200,
"message" : "item added to cart"
}


error : 
500 Internal Server Error: Unexpected server issues.
404 Product Not Found: Invalid productId.
400 Bad Request: Missing/invalid cartId, quantity, or productId.
403 Forbidden: Unauthorized attempt to access/modify a different cart.
401 Unauthorized: Missing or invalid authentication for signed-up users.
409 Conflict: Issues when merging guest and user carts.
422 Unprocessable Entity: Validation errors or invalid data format.
429 Too Many Requests: Rate-limiting enforcement.
503 Service Unavailable: Service downtime or dependency failure.
408 Request Timeout: Request took too long to complete.




2. get cart items

GET api/v1/user/cart
Authorization Bearer <JWT_TOKEN>  (user only)

response : 
{
  "success" : true,
  "code" : 200,
  "message" : "cart items retrieved successfully",
  "data" : {
    "cartId" : ""temp-hcbsdu77", //only for non-signedup users
    items : [
      {
        "productId" : "49753847",
        "productName" : "blah blah tshirt",
        "quantity" : 1,
        "price" : 10.99,
        "totalPrice" : 40.99,
        "imageUrl" : "https://example.com/image.jpg"
      },
      {
        "productId" : "388847",
        "productName" : "blah blah heels",
        "quantity" : 1,
        "price" : 14.99,
        "totalPrice" : 28heels.99,
        "imageUrl" : "https://example.com/image.jpg"
      },
      {
        "productId" : "843788",
        "productName" : "blah blah ",
        "quantity" : 1,
        "price" : 10.99,
        "totalPrice" : 40.99,
        "imageUrl" : "https://example.com/image.jpg"
      }
    ]
  }
}

error : 
200 emty cart with total of 0 
500 internal server error
404 cart not found please check cartId (for guest user)
401 unauthorized
403 forbidden

3. update quantity of item in cart

since carts are connected to userId in the cart model
  => here :Database Structure: The cart is linked to the userId rather than a cartId


two ways:-
  auth (userId ) for signed-up users
  cartId for guest users


PUT api/v1/cart/:productId

Authorization: Bearer <JWT_TOKEN> // Only for signed-up users
Content-Type: application/json

request 
{
  "cartId"  : "temp-hcbsdu77" // only for guest users,
  "productId" : 1,
  "quantity" : 1
}

response 
{
  "productId" : 1,
  "quantity" : 3
}

error: 
500
400 invalid request / cartId /quantity
401 unauthorized
403 forbidden 
404 product not found in the cart


4. remove item from cart

DELETE api/v1/cart/:productId

response :

{
  "success" : true,
  "code" : 200,
  "message" : "deleted successfully"
}

error: 
500 
400 invalid request / cartId / prodcutId 
401 unauthorized
403 forbidden
404 product not found 

5. clear cart

DELETE api/v1/cart

auth for signed up user
Authorization: Bearer <JWT_TOKEN>
Content-Type: application/json


cartId from cookies for guest users
request body:
{
  "cartId": "temp-hcbsdu77" // Only for guest users
}


response :

{
  "success": true,
  "code": 200,
  "message": "Cart cleared successfully"
}

error: 
500 internal server error
400 invalid request . / please provide a valid cart Id
401 unauthorized
403 forbidden
404 cart not found


_______________________________________________________________________________
## wishlist management

1. POST api/v1/whislist

add to wishlist 

> auth for signedup users:
Authorization: Bearer <JWT_TOKEN>
Content-Type: application/json


> wishlistId for guest users


request :

{
  "productId" : 3847958,
  "wishlistId" : "temp-479573" // only for guest users
}

repsonse : 

{
  "productId" : 3847958,
  "message" : "Added to whislist" 
}

error:

500 internal server error
400 invalid request /please provide a valid wishlistId /Please provide a valid productId.
401 unauthorized
403 forbidden
404 productId / wishlistId not found
409 Item already exists in the wishlist.


2. get wishlist 

GET api/v1/wishlist
or
GET /api/v1/wishlist?wishlistId=temp-479573 // only if the guest user wishlistId is'nt not sent with request body

> auth for signedup users:
Authorization: Bearer <JWT_TOKEN>
Content-Type: application/json


> wishlistId for guest users

request
{
  "wishlistId" : "temp-479573" // only for guest users
}

response : 
{
  wishlistId : "temp-479573" // only for guest users,
  "wishlist" : [
    {
      "productId" : 48354895,
      "name" : "Gradient tshirt
      "image" : "url..././",
      "price" : "40.99"
      "stock" : 2,
      "Size" : "X-l"

    },
    {
      "productId" : 48354895,
      "name" : "Black wolves tshirt
      "image" : "url..././",
      "price" : "44.99"
      "stock" : 2,
      "Size" : "X-l"

    }
  ]
}

error :
200 empty wishlist
500 internal error
400 invalid request / wishlistId invalid 
401 unauthorized
403 forbidden

3. remove product from wishlist

DELETE api/v1/wishlist 
or
DELETE api/v1/wishlist?wishlistId=temp-87634&productId=48354895 // only if the wishlistId and prodcutId isnt included in the request body

> auth for signedup users:
Authorization: Bearer <JWT_TOKEN>
Content-Type: application/json


> wishlistId for guest users

request body : 
{
  "productId" : 48354895, 
  "wishlistId" : 87634, // only for guest users
}

response :

{
  "messgae" : "item removed successfully"
}


error: 
500 internal error
400 invalid request/ productId invalid / wishlistId invalid
401 unauthorized
403 forbidden
404 prodcutId not found
409 item already removed

_______________________________________________________________________________

## order management

1. create order 

> authentication required 
  Authorization: Bearer <JWT_TOKEN>
  Content-Type: application/json

  POST api/v1/order

request :

 tip: safer to handle these calculations of price on the backend.

{
  "productId" : 843653,
  "size" :  "X-l",
  "coupoun" : "SUMMER20", // if applicable
  "paymentMethod" : "UPI",
}

repsonse: 
{
  "success" : true,
  "code" : 200,
  "message" : "order created",
  "orderDetails" : {
    "userId" : "48593",
    "productId" : "45784798",
     "size" :  "X-l",
     "price" : 40.99, //subtotal
     "discount" : "5%"
     "discountedPrice" : "38.94", // final price after discount
     "coupoun" : "SUMMER20", // if applicable
     "amountPaid" : "38.94", // total amt payable
     "paymentMethod" : "UPI"
  }
}

error: 
500 internal error
400 Invalid Input Data	
404 Product or Coupon Does Not Exist
403 forbidden
401 unauthorized

2. get users order

already created this endpoint in the users management list

3. get order details

GET api/v1/order/:id

auth headers required (user's access)

response :
{
  "success": true,
  "code": 200,
  "message": "Order details fetched successfully",
  "order": {
    "orderId": "ORD123456",
    "userId": "48593",
    "productId": "45784798",
    "brand": "Puma",
    "name": "Women's classic artisanal graphic printed hoodie",
    "size": "X-S",
    "status": {
      "currentStatus":  {
      "status" : "dispatched",
      "updatedAt": "2025-03-11T12:00:00Z"
      }
    }
      "deliveryTimeline": ["packed", "dispatched", "on the way", "delivered" ]
    },
    "cancelled" : false // true / false
    "returnAvailable": true,
    "returnDeadline": "Mon, 23 Dec",
    "yourReview": "Great quality and fits perfectly!",
    "yourRatings": 5,
    "price": 40.99,
    "discount": "5%",
    "discountedPrice": 38.94,
    "coupon": "SUMMER20",
    "amountPaid": 38.94,
    "paymentMethod": "UPI"
  }
}

error : 

500 internal error
403 forbidden
401 unauthorized
400 bad request / invalid orderId
404 order not found


4. update order status (super-Admins only)

PUT api/v1/admin/order/:id

auth req. super admins only

request :
{
  "name" : "Women's classic brown hoodie"
    "status": {
      "currentStatus":  {
      "status" : "dispatched",
      "updatedAt": "2025-03-11T12:00:00Z"
      }
    },
}

repsonse : 
{
  "success": true,
  "code": 200,
  "message": "Order status updated",
  "orderDetails": {
    "orderId": "123456",
    "name": "Women's classic brown hoodie",
    "status": {
      "currentStatus":  {
      "status" : "dispatched",
      "updatedAt": "2025-03-11T12:00:00Z"
      }
    }
  }
}

error: 
500 internal error
400 bad request / invalid data
401 unauthorized
403 forbidden
404 not found

5. cancel order

auth is required (user)

POST api/v1/order/:id/cancel

response : 
{
  "success": true,
  "code": 200,
  "message": "Order cancelled",
  "orderDetails": {
    "orderId": "123456",
    "cancelled": true,
    "cancelledAt": "2025-03-11T12:30:00Z"
  }
}


error: 
500 internal server error
404 order not found
401 unauthorized
403 forbidden
400 bad request

_______________________________________________________________________________
## payment management

1. initiate payment


 POST api/v1/payment/initiate

{
  "orderId": "123456",
  "amount": 3894,  // Amount in paise (₹38.94 = 3894 paise)
  "currency": "INR",
  "paymentMethod": "UPI"
}



repsonse 
{
  "success": true,
  "code": 200,
  "message": "Payment initiated",
  "razorpayOrderId": "order_H9DfU9GF8yJkVm",
  "amount": 3894,
  "currency": "INR",
  "paymentMethod": "UPI",
  "razorpayKey": "rzp_test_XXXXXX"
}


error : 
400 bad request
401 unauthorized
403 forbidden
404 order not found
500 internal error


2. verify a payment

auth req (users)
POST api/v1/payment/verify

request: 
{
  "razorpayPaymentId": "pay_H9DfU9GF8yJkVm",
  "razorpayOrderId": "order_H9DfU9GF8yJkVm",
  "razorpaySignature": "a_valid_signature"
}


response:
{
  "success": true,
  "code": 200,
  "message": "Payment verified successfully",
  "paymentDetails": {
    "orderId": "123456",
    "transactionId": "txn_789654",
    "paymentId": "pay_H9DfU9GF8yJkVm",
    "status": "successful",
    "amountPaid": 38.94,
    "currency": "INR",
    "paymentMethod": "UPI",
    "paidAt": "2025-03-11T12:00:00Z"
  }
}


error :
400 bad request
401 unauthorized
403 forbidden
404 transaction not found
409 payment already verififed
500 internal server error

3. get payment history

GET api/v1/payment/history

GET api/v1/payment/history?limit=10&page=1
Authorization: Bearer <JWT_TOKEN>

response :


{
  "success": true,
  "code": 200,
  "message": "Payment history retrieved",
  "payments": [
    {
      "orderId": "123456",
      "transactionId": "txn_789654",
      "razorpayPaymentId": "pay_H9DfU9GF8yJkVm",
      "status": "successful",
      "amountPaid": 3894,
      "currency": "INR",
      "paymentMethod": "UPI",
      "paidAt": "2025-03-10T15:45:00Z"
    }
  ],
  "pagination": {
    "currentPage": 1,
    "totalPages": 3,
    "totalRecords": 25
  }
}

_______________________________________________________________________________
## shipping management

1. GET api/v1/shipping/options

or

GET api/v1/shipping/options?pincode=110001&weight=2.5

> Fetch available shipping providers from the database or third-party shipping API (e.g., ShipRocket, FedEx, Delhivery).
> Calculate shipping charges based on pincode, package weight, delivery speed, etc.
> Return a list of available shipping options.

repsonse : 
{
  "success": true,
  "code": 200,
  "message": "Shipping options retrieved successfully",
  "shippingOptions": [
    {
      "id": "SHIP123",
      "provider": "FedEx",
      "service": "Standard Shipping",
      "estimatedDelivery": "3-5 business days",
      "cost": 50.00,
      "currency": "INR"
    },
    {
      "id": "SHIP456",
      "provider": "BlueDart",
      "service": "Express Shipping",
      "estimatedDelivery": "1-2 business days",
      "cost": 120.00,
      "currency": "INR"
    },
    {
      "id": "SHIP789",
      "provider": "Delhivery",
      "service": "Same Day Delivery",
      "estimatedDelivery": "Same day",
      "cost": 200.00,
      "currency": "INR"
    }
  ]
}


error : 
400 bad request
500 internal server error
404 no shipping options found

2. create order / ser address
auth required (users)

POST api/v1/user/shipping/shipping-address

request :
{
  "orderId": "123456",
  "shippingOptionId": "SHIP456",
  "address": {
    "name": "Drishti T",
    "phone": "+91-9876543210",
    "street": "blah blah street ",
    "city": "Delhi",
    "state": "Delhi",
    "pincode": "110001",
    "country": "India"
  }
}

Validate Order: Ensure that the given orderId exists and belongs to the authenticated user.
Validate Shipping Option: Check if shippingOptionId is valid and available.
Store Shipping Order in Database: Save shipping details and mark the order as "Processing".
Return Confirmation: Respond with shipping details.

response : 

{
  "success": true,
  "code": 201,
  "message": "Shipping order created successfully",
  "shippingDetails": {
    "shippingId": "SHIPORD789",
    "orderId": "123456",
    "shippingProvider": "BlueDart",
    "service": "Express Shipping",
    "estimatedDelivery": "1-2 business days",
    "trackingId": "BLUEDART123456",
    "status": "Processing"
  }
}

error :
400  bad request
401 unauthorized
403 forbidden
404 order not found
500 internal server request

2. update shipping address

PUT api/v1/user/shipping-address/:id



request : 
{
  "address": {
    "name": "Drishti T",
    "phone": "+91-9876543210",
    "street": "blah blah road",
    "city": "Delhi",
    "state": "Delhi",
    "pincode": "110002",
    "country": "India"
  }
}

response : 

{
  "success": true,
  "code": 200,
  "message": "Shipping address updated successfully",
  "updatedAddress": {
    "shippingId": "SHIP789",
    "name": "Drishti T",
    "phone": "+91-9876543210",
    "street": "blah blah road",
    "city": "Delhi",
    "state": "Delhi",
    "pincode": "110002",
    "country": "India"
  }
}

error :
400 invalid fields / bad request
401 unauthorized
403 forbidden (address dosnt belong to this user)
404 no shipping Id found
409 address cannot be updated as the order is already shipped
500 internal server error

4. check shipping status
 GET api/v1/shipping/status/:id

 auth required (users)

response : 
{
  "success": true,
  "code": 200,
  "message": "Shipping status retrieved successfully",
  "shippingStatus": {
    "orderId": "ORD12345",
    "currentStatus": "On the way",
    "expectedDelivery": "2025-03-15",
    "trackingId": "TRACK987654",
    "courier": "Blue Dart",
    "lastUpdated": "2025-03-11T14:30:00Z"
  }
}



error : 
400 bad Request
401 unauthorized
403 forbidden
404 id not found
500 internal error

5. cancel a shipping order

POST api/v1/shipping/cancel/:id
auth required

response: 

{
  "success": true,
  "code": 200,
  "message": "Shipping order cancelled",
  "orderDetail": {
    "orderId": "ORD12345",
    "cancelled": true,
    "refundStatus": "Initiated"
  }
}

error : 
400  bad request
401 unauthorized
403 forbidden
404 order not found
409  cancellation not allowed
500 internal error

6. return order

POST api/v1/shipping/return/:id

auth req.

request :

{
  "reason": "Received the wrong item",
  "returnInitiatedAt": "2025-03-11T12:30:00Z"
}


response : 
{
  "success": true,
  "code": 200,
  "message": "Return request initiated",
  "returnDetails": {
    "orderId": "ORD12345",
    "status": "Return Requested",
    "expectedPickupDate": "2025-03-14",
    "refundStatus": "Pending"
  }
}

error: 
400 bad Request
401 unauthorized
403  forbidden
404 order not found
409 return not allowed
500 internal error

7. update delivery status

auth req. (only super-admins)

PUT api/v1/admin/shipping/update/:id

request: 
{
  "status": {
    "currentStatus": "Delivered",
    "updatedAt": "2025-03-11T14:00:00Z"
  }
}


repsonse : 
{
  "success": true,
  "code": 200,
  "message": "Order delivery status updated",
  "orderDetails": {
    "orderId": "ORD12345",
    "status": {
      "currentStatus": "Delivered",
      "updatedAt": "2025-03-11T14:00:00Z"
    }
  }
}

error:
400  bad request
401 unauthorized
403 forbidden
404 order not found
500 internal error

additional stuff :
8. Webhook for Shipping Updates: Allow third-party APIs (e.g., FedEx, ShipRocket) to send real-time tracking updates.
9. Estimated Delivery Date Calculator: Expose an endpoint like GET /shipping/estimate?origin=110001&destination=560001&weight=2.5 to pre-calculate delivery times.
10 .Shipping Label Generation: Provide a PDF shipping label download via GET api/v1/shipping/label/:id.

🔹 For small e-commerce startups: Use third-party shipping APIs (like ShipRocket, FedEx, or Delhivery).
🔹 For large-scale operations: Build an in-house delivery system with real-time tracking & order assignment.


_______________________________________________________________________________
## review management

1. get review fro the product

GET api/v1/product/:id/reviews

no auth req ,  public access

response : 
{
  "success": true,
  "code": 200,
  "message": "Product reviews retrieved successfully",
  "productId": "PROD12345",
  "reviews": [
    {
      "reviewId": "REV001",
      "user": {
        "userId": "USER123",
        "name": "Drishti T",
        "avatar": "https://example.com/avatar.jpg"
      },
      "rating": 5,
      "comment": "Great product! High quality and fast delivery.",
      "createdAt": "2025-03-11T14:30:00Z"
    },
    {
      "reviewId": "REV002",
      "user": {
        "userId": "USER456",
        "name": "John Doe",
        "avatar": "https://example.com/avatar2.jpg"
      },
      "rating": 4,
      "comment": "Good value for money. Packaging could be better.",
      "createdAt": "2025-03-10T10:15:00Z"
    }
  ]
}

error :
404 id not found
400 bad request
500 internal error

2. add a review
POST api/v1/product/:id/review

auth req (users)
{
  "rating": 5,
  "comment": "Amazing product! Loved it."
}

response : 
{
  "success": true,
  "code": 201,
  "message": "Review added successfully",
  "review": {
    "id": "REVIEW123",
    "rating": 5,
    "comment": "Amazing product! Loved it.",
    "createdAt": "2025-03-12T12:34:56.000Z",
    "user": {
      "id": "USER56789",
      "name": "John Doe",
      "avatar": "https://example.com/avatar.jpg"
    }
  }
}

error : 
404 product id not found
400 rating must be between 1 - 5
500 internal server error
403 forbidden
401 unauthorized

3. update review

PUT api/v1/product/:id/review

auth rq (users)

request : 
{
  "reviewId": "REVIEW789",
  "userId": "USER56789",
  "rating": 4,
  "comment": "Updated comment: The product is good but can be improved."
}


repsonse :
{
  "success": true,
  "code": 200,
  "message": "Review updated successfully",
  "review": {
    "id": "REVIEW789",
    "rating": 4,
    "comment": "Updated comment: The product is good but can be improved.",
    "createdAt": "2025-03-12T12:34:56.000Z",
    "updatedAt": "2025-03-12T13:00:00.000Z",
    "user": {
      "id": "USER56789",
      "name": "John Doe",
      "avatar": "https://example.com/avatar.jpg"
    }
  }
}


error : 
404 review not found
403  unauthorized
400 vlaidation error
401  unauthorized
500 internal error

4. delete a review 

DELETE api/v1/product/:id/delete

auth req (user)

response :
{
  "success" : true,
  "code" : 200,
  "message" : "comment removed",
}


error : 
500 internal esrver error
400 bad request  
401 unauthorized
403 forbidden
404 review not found

_______________________________________________________________________________
## analytics & reports (admin)

1. get sales report 
GET api/v1/admin/reports/sales


response : 
{
  "success": true,
  "code": 200,
  "message": "Sales report fetched successfully",
  "report": {
    "totalRevenue": 105420.50,
    "totalOrders": 567,
    "totalProductsSold": 1203,
    "averageOrderValue": 185.90,
    "bestSellingProducts": [
      {
        "productId": "PROD123",
        "name": "Wireless Gaming Mouse",
        "unitsSold": 150,
        "totalRevenue": 7500.00
      },
      {
        "productId": "PROD456",
        "name": "Mechanical Keyboard",
        "unitsSold": 120,
        "totalRevenue": 8400.00
      }
    ],
    "topCustomers": [
      {
        "customerId": "USER987",
        "name": "Alice Johnson",
        "totalSpent": 3400.75,
        "totalOrders": 12
      },
      {
        "customerId": "USER654",
        "name": "John Doe",
        "totalSpent": 2890.30,
        "totalOrders": 9
      }
    ],
    "totalDiscountsGiven": 1240.50,
    "totalTaxesCollected": 9520.75,
    "salesByMonth": [
      { "month": "January", "revenue": 15420.00 },
      { "month": "February", "revenue": 16800.00 },
      { "month": "March", "revenue": 17400.50 }
    ]
  }
}

error: 400
500
403
400
401
404

2. get inventory reports 

GET /api/v1/admin/reports/inventory?category=electronics&lowStock=true

category	|| string	  || Filter by product category (e.g., electronics, apparel).
lowStock	|| boolean	|| If true, returns only low-stock products.




response 
{
  "status": "success",
  "data": {
    "inventory": [
      {
        "id": "prod_12345",
        "name": "Smartphone XYZ",
        "category": "electronics",
        "stock": 5,
        "lowStockThreshold": 10
      },
      {
        "id": "prod_67890",
        "name": "Laptop ABC",
        "category": "electronics",

        "stock": 3,
        "lowStockThreshold": 5
      }
    ],
    "totalLowStockItems": 2
  }
}

in case of empty inventory:

{
  "status": "success",
  "data": {
    "inventory": [],
    "totalLowStockItems": 0
  }
}


error :

400 bad request / Invalid category provided
404 not found
500 internal error 
401 unauthorized
403 forbidden 


_______________________________________________________________________________
## notification management

1. GET notification

GET api/v1/notifcations

fetch all notifcations for all the users

auth req. (user)

response: 200
{
  "success": true,
  "data": [
    {
      "id": "notif_123",
      "userId": "user_456",
      "type": "order_update",
      "message": "Your order #ORD789 has been shipped.",
      "isRead": false,
      "createdAt": "2025-03-13T10:00:00Z"
    },
    {
      "id": "notif_456",
      "userId": "user_456",
      "type": "discount",
      "message": "Exclusive 15% off for you!",
      "isRead": true,
      "createdAt": "2025-03-12T09:30:00Z"
    }
  ]
}


and if admin wants to get the notfication for a particular user
GET /api/v1/notifications?userId=user_456
Authorization: Bearer <admin_token>

extract the user id from the url ID=user_45

error : 

500 	"Internal server error"
400 bad request / invalid id
401 unauthorized
403 Forbidden - You do not have access"
404 "No notifications found"

2. Mark a Notification as Read // (if required)

Authorization: Bearer <token>

PUT api/v1/notifcations/abc123/read 

repsonse: 
{
  "success" : true,
  "code" : 200
  "message" : "Notification marked as read"
}

error : 
500 "Internal server error"
400 bad request / invalid id
401 unauthorized
403 Forbidden - You do not have access"
404 notifcation not found

3. delete a notification

DELETE /api/v1/notifications/abc123
Authorization: Bearer <token> (users)


DELETE api/v1/notifications/:id

response : 

{
  "success": true,
  "message": "Notification deleted"
}

error:
500 internal server error
400 bad request
401 unauthorized
404 notification not founc
403 forbidden

4. send a new notification

POST api/v1/notifications

Authorization: Bearer <token>
Content-Type: application/json

request :
{
  "userId": "user_123",
  "type": "discount",
  "message": "Flash sale: 20% off on all items!"
}

response : 
{
  "success": true,
  "message": "Notification created",
  "data": {
    "id": "def456",
    "type": "discount",
    "message": "Flash sale: 20% off on all items!",
    "isRead": false,
    "createdAt": "2025-03-13T10:05:00Z"
  }
}


_______________________________________________________________________________

## DISCOUNT AND COUPON MANAGEMENT

GET /api/v1/coupons
Authorization: Bearer <user_or_admin_token>

GET api/v1/coupons

response : 
{
  "success": true,
  "data": [
    {
      "id": "coupon_123",
      "code": "SAVE10",
      "description": "Get 10% off on all electronics",
      "discountType": "percentage",
      "discountValue": 10,
      "minOrderValue": 500,
      "maxDiscount": 100,
      "status": "active",
      "validFrom": "2025-03-10T00:00:00Z",
      "validTo": "2025-03-31T23:59:59Z",
      "usageLimit": 100,
      "used": 45
    },
    {
      "id": "coupon_456",
      "code": "FREESHIP",
      "description": "Free shipping on orders above $50",
      "discountType": "free_shipping",
      "discountValue": null,
      "minOrderValue": 50,
      "maxDiscount": null,
      "status": "active",
      "validFrom": "2025-03-01T00:00:00Z",
      "validTo": "2025-03-31T23:59:59Z",
      "usageLimit": 200,
      "used": 120
    }
  ]
}

admin fetching all the coupouns
{
  "success": true,
  "data": [
    {
      "id": "coupon_123",
      "code": "SAVE10",
      "status": "active",
      "validFrom": "2025-03-10T00:00:00Z",
      "validTo": "2025-03-31T23:59:59Z",
      "used": 45,
      "usageLimit": 100
    },
    {
      "id": "coupon_789",
      "code": "SUMMER20",
      "status": "expired",
      "validFrom": "2025-02-01T00:00:00Z",
      "validTo": "2025-02-28T23:59:59Z",
      "used": 90,
      "usageLimit": 100
    }
  ]
}


error :

400 invalid query parameters 
401 unauthorized
403 forbidden
404 no coupons found
500 internal server error

2. apply coupon to cart

Authorization: Bearer <user_token>
Content-Type: application/json

POST api/v1/cart/appy-coupon

request: 
{
  "couponCode": "SAVE10"
}


reponse :

{
  "success": true,
  "message": "Coupon applied successfully!",
  "cart": {
    "subtotal": 1000.00,
    "discount": 100.00,
    "total": 900.00,
    "appliedCoupon": {
      "code": "SAVE10",
      "discountType": "percentage",
      "discountValue": 10,
      "maxDiscount": 100,
      "status": "active",
      "validUntil": "2025-03-31T23:59:59Z"
    }
  }
}

example #1:-
If SAVE10 is a 10% off coupon, and the cart subtotal is $1000, then:
discount = 10% of 1000 = $100
Max Discount Cap Applied? ✅ $100 <= maxDiscount ($100)
Final Total = $900


for example #2 (free shipping coupon:- FREESHIP removes the shipping fee but doesn't change the cart subtotal.)

repsonse:
{
  "success": true,
  "message": "Coupon applied successfully!",
  "cart": {
    "subtotal": 75.00,
    "discount": 0.00,
    "shipping": 0.00,
    "total": 75.00,
    "appliedCoupon": {
      "code": "FREESHIP",
      "discountType": "free_shipping",
      "discountValue": null,
      "status": "active",
      "validUntil": "2025-03-31T23:59:59Z"
    }
  }
}

error:

400 invalid request body / expired coupon / coupon is not applicable to your cart / coupon usage limit exceeded
404 coupon not found
401 unauthorized
500 internal server error

3. remove coupon by user

 DELETE /api/v1/cart/remove-coupon


request: 
{
  "couponCode": "SAVE10"
}


response : 
{
  "success": true,
  "message": "Coupon removed successfully!",
  "cart": {
    "subtotal": 1000.00,
    "discount": 0.00,
    "total": 1000.00,
    "appliedCoupon": null
  }
}

3. admin create coupon

Authorization: Bearer <admin_token> super-adminsonly
Content-Type: application/json

POST api/v1/admin/create-coupon

request : 
{
  "code": "SAVE10",
  "discountType": "percentage", 
  "discountValue": 10,
  "minPurchase": 500,
  "maxDiscount": 100,
  "validFrom": "2025-03-15T00:00:00Z",
  "validUntil": "2025-04-15T23:59:59Z",
  "usageLimit": 100,
  "status": "active"
}

response : 
{
  "success": true,
  "message": "Coupon created successfully!",
  "coupon": {
    "id": "coupon_12345",
    "code": "SAVE10",
    "discountType": "percentage",
    "discountValue": 10,
    "minPurchase": 500,
    "maxDiscount": 100,
    "validFrom": "2025-03-15T00:00:00Z",
    "validUntil": "2025-04-15T23:59:59Z",
    "usageLimit": 100,
    "status": "active",
    "createdAt": "2025-03-13T12:00:00Z"
  }
}

error: 
400 invalid data
409 coupon already exists
403 forbidden
500 internal server error


4. admin delete coupon

DELETE /api/v1/admin/coupon/coupon_12345
Authorization: Bearer <admin_token>


DELETE api/v1/admin/coupon/:id


response :
{
  "success": true,
  "message": "Coupon deleted successfully!"
}

error :

400 coupon Id not found
404 coupons not found
403 forbidden
500 internal server error












































